#include "common.hh"
#include "config.hh"
#include "dns.hh"
#include "mock_config.hh"
#include "resolve.hh"

MockResponse mock_response = {
    .answers = {0x4, 0x74, 0x65, 0x73, 0x74, 0x3,  0x63, 0x6f, 0x6d, 0x0,  0x0,  0x6, 0x0,  0x1,  0x0,  0x0,
                0x0, 0x0,  0x0,  0x32, 0x1,  0x61, 0x4,  0x74, 0x65, 0x73, 0x74, 0x3, 0x63, 0x6f, 0x6d, 0x0,
                0x1, 0x62, 0x4,  0x74, 0x65, 0x73, 0x74, 0x3,  0x63, 0x6f, 0x6d, 0x0, 0x0,  0x0,  0x0,  0x1,
                0x0, 0x0,  0x0,  0x2,  0x0,  0x0,  0x0,  0x3,  0x0,  0x0,  0x0,  0x4, 0x0,  0x0,  0x0,  0x5},
    .answers_count = 1,
};

int main() {
    Resolver resolver{TEST_RESOLVER_CONFIG};
    auto opt_rrset = resolver.resolve(TEST_DOMAIN, RRType::SOA);
    ASSERT(opt_rrset.has_value());

    auto &rrset = opt_rrset.value();
    ASSERT(rrset.size() == 1);

    auto &rr = rrset[0];
    ASSERT(rr.type == RRType::SOA);
    auto soa = std::get<SOA>(rr.data);

    ASSERT(soa.master_name == "a.test.com.");
    ASSERT(soa.rname == "b.test.com.");
    ASSERT(soa.serial == 1);
    ASSERT(soa.refresh == 2);
    ASSERT(soa.retry == 3);
    ASSERT(soa.expire == 4);
    ASSERT(soa.negative_ttl == 5);

    return EXIT_SUCCESS;
}
