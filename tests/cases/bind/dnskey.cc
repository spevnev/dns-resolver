#include <utility>
#include "common.hh"
#include "config.hh"
#include "resolve.hh"

int main() {
    // clang-format off
    /// dnskey DNSKEY 257 3 5 AQOeX7+baTmvpVHb2CcLnL1dMRWbuscRvHXlLnXwDzvqp4tZVKp1sZMepFb8MvxhhW3y/0QZsyCjczGJ1qk8vJe52iOhInKROVLRwxGpMfzPRLMlGybr51bOV/1se0ODacj3DomyB4QB5gKTYot/K9alk5/j8vfd4jWCWD+E1Sze0Q==
    // clang-format on
    std::vector<uint8_t> dnskey_key
        = {0x01, 0x03, 0x9E, 0x5F, 0xBF, 0x9B, 0x69, 0x39, 0xAF, 0xA5, 0x51, 0xDB, 0xD8, 0x27, 0x0B, 0x9C, 0xBD,
           0x5D, 0x31, 0x15, 0x9B, 0xBA, 0xC7, 0x11, 0xBC, 0x75, 0xE5, 0x2E, 0x75, 0xF0, 0x0F, 0x3B, 0xEA, 0xA7,
           0x8B, 0x59, 0x54, 0xAA, 0x75, 0xB1, 0x93, 0x1E, 0xA4, 0x56, 0xFC, 0x32, 0xFC, 0x61, 0x85, 0x6D, 0xF2,
           0xFF, 0x44, 0x19, 0xB3, 0x20, 0xA3, 0x73, 0x31, 0x89, 0xD6, 0xA9, 0x3C, 0xBC, 0x97, 0xB9, 0xDA, 0x23,
           0xA1, 0x22, 0x72, 0x91, 0x39, 0x52, 0xD1, 0xC3, 0x11, 0xA9, 0x31, 0xFC, 0xCF, 0x44, 0xB3, 0x25, 0x1B,
           0x26, 0xEB, 0xE7, 0x56, 0xCE, 0x57, 0xFD, 0x6C, 0x7B, 0x43, 0x83, 0x69, 0xC8, 0xF7, 0x0E, 0x89, 0xB2,
           0x07, 0x84, 0x01, 0xE6, 0x02, 0x93, 0x62, 0x8B, 0x7F, 0x2B, 0xD6, 0xA5, 0x93, 0x9F, 0xE3, 0xF2, 0xF7,
           0xDD, 0xE2, 0x35, 0x82, 0x58, 0x3F, 0x84, 0xD5, 0x2C, 0xDE, 0xD1};

    Resolver resolver{TEST_RESOLVER_CONFIG};
    auto opt_rrset = resolver.resolve("dnskey." TEST_DOMAIN, RRType::DNSKEY);
    ASSERT(opt_rrset.has_value());

    auto &rrset = opt_rrset.value();
    ASSERT(rrset.size() == 1);

    auto &rr = rrset[0];
    ASSERT(rr.type == RRType::DNSKEY);
    auto &dnskey = std::get<DNSKEY>(rr.data);

    ASSERT(dnskey.is_zone_key);
    ASSERT(dnskey.is_secure_entry);
    ASSERT(dnskey.protocol == DNSKEY_PROTOCOL);
    ASSERT(std::to_underlying(dnskey.algorithm) == 5);
    ASSERT(dnskey.key == dnskey_key);
    ASSERT(dnskey.key_tag == 9465);

    return EXIT_SUCCESS;
}
